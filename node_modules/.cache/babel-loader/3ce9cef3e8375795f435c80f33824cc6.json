{"ast":null,"code":"'use strict';\n\nconst stripBom = require('strip-bom-string');\n\nconst typeOf = require('kind-of');\n\nexports.define = function (obj, key, val) {\n  Reflect.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: val\n  });\n};\n/**\n * Returns true if `val` is a buffer\n */\n\n\nexports.isBuffer = function (val) {\n  return typeOf(val) === 'buffer';\n};\n/**\n * Returns true if `val` is an object\n */\n\n\nexports.isObject = function (val) {\n  return typeOf(val) === 'object';\n};\n/**\n * Cast `input` to a buffer\n */\n\n\nexports.toBuffer = function (input) {\n  return typeof input === 'string' ? Buffer.from(input) : input;\n};\n/**\n * Cast `val` to a string.\n */\n\n\nexports.toString = function (input) {\n  if (exports.isBuffer(input)) return stripBom(String(input));\n\n  if (typeof input !== 'string') {\n    throw new TypeError('expected input to be a string or buffer');\n  }\n\n  return stripBom(input);\n};\n/**\n * Cast `val` to an array.\n */\n\n\nexports.arrayify = function (val) {\n  return val ? Array.isArray(val) ? val : [val] : [];\n};\n/**\n * Returns true if `str` starts with `substr`.\n */\n\n\nexports.startsWith = function (str, substr, len) {\n  if (typeof len !== 'number') len = substr.length;\n  return str.slice(0, len) === substr;\n};","map":{"version":3,"sources":["D:/programmering/react projects/min-hemsida-1/frontend/node_modules/gray-matter/lib/utils.js"],"names":["stripBom","require","typeOf","exports","define","obj","key","val","Reflect","defineProperty","enumerable","configurable","writable","value","isBuffer","isObject","toBuffer","input","Buffer","from","toString","String","TypeError","arrayify","Array","isArray","startsWith","str","substr","len","length","slice"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,kBAAD,CAAxB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAAtB;;AAEAE,OAAO,CAACC,MAAR,GAAiB,UAASC,GAAT,EAAcC,GAAd,EAAmBC,GAAnB,EAAwB;AACvCC,EAAAA,OAAO,CAACC,cAAR,CAAuBJ,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/BI,IAAAA,UAAU,EAAE,KADmB;AAE/BC,IAAAA,YAAY,EAAE,IAFiB;AAG/BC,IAAAA,QAAQ,EAAE,IAHqB;AAI/BC,IAAAA,KAAK,EAAEN;AAJwB,GAAjC;AAMD,CAPD;AASA;AACA;AACA;;;AAEAJ,OAAO,CAACW,QAAR,GAAmB,UAASP,GAAT,EAAc;AAC/B,SAAOL,MAAM,CAACK,GAAD,CAAN,KAAgB,QAAvB;AACD,CAFD;AAIA;AACA;AACA;;;AAEAJ,OAAO,CAACY,QAAR,GAAmB,UAASR,GAAT,EAAc;AAC/B,SAAOL,MAAM,CAACK,GAAD,CAAN,KAAgB,QAAvB;AACD,CAFD;AAIA;AACA;AACA;;;AAEAJ,OAAO,CAACa,QAAR,GAAmB,UAASC,KAAT,EAAgB;AACjC,SAAO,OAAOA,KAAP,KAAiB,QAAjB,GAA4BC,MAAM,CAACC,IAAP,CAAYF,KAAZ,CAA5B,GAAiDA,KAAxD;AACD,CAFD;AAIA;AACA;AACA;;;AAEAd,OAAO,CAACiB,QAAR,GAAmB,UAASH,KAAT,EAAgB;AACjC,MAAId,OAAO,CAACW,QAAR,CAAiBG,KAAjB,CAAJ,EAA6B,OAAOjB,QAAQ,CAACqB,MAAM,CAACJ,KAAD,CAAP,CAAf;;AAC7B,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAM,IAAIK,SAAJ,CAAc,yCAAd,CAAN;AACD;;AACD,SAAOtB,QAAQ,CAACiB,KAAD,CAAf;AACD,CAND;AAQA;AACA;AACA;;;AAEAd,OAAO,CAACoB,QAAR,GAAmB,UAAShB,GAAT,EAAc;AAC/B,SAAOA,GAAG,GAAIiB,KAAK,CAACC,OAAN,CAAclB,GAAd,IAAqBA,GAArB,GAA2B,CAACA,GAAD,CAA/B,GAAwC,EAAlD;AACD,CAFD;AAIA;AACA;AACA;;;AAEAJ,OAAO,CAACuB,UAAR,GAAqB,UAASC,GAAT,EAAcC,MAAd,EAAsBC,GAAtB,EAA2B;AAC9C,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6BA,GAAG,GAAGD,MAAM,CAACE,MAAb;AAC7B,SAAOH,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAaF,GAAb,MAAsBD,MAA7B;AACD,CAHD","sourcesContent":["'use strict';\n\nconst stripBom = require('strip-bom-string');\nconst typeOf = require('kind-of');\n\nexports.define = function(obj, key, val) {\n  Reflect.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: val\n  });\n};\n\n/**\n * Returns true if `val` is a buffer\n */\n\nexports.isBuffer = function(val) {\n  return typeOf(val) === 'buffer';\n};\n\n/**\n * Returns true if `val` is an object\n */\n\nexports.isObject = function(val) {\n  return typeOf(val) === 'object';\n};\n\n/**\n * Cast `input` to a buffer\n */\n\nexports.toBuffer = function(input) {\n  return typeof input === 'string' ? Buffer.from(input) : input;\n};\n\n/**\n * Cast `val` to a string.\n */\n\nexports.toString = function(input) {\n  if (exports.isBuffer(input)) return stripBom(String(input));\n  if (typeof input !== 'string') {\n    throw new TypeError('expected input to be a string or buffer');\n  }\n  return stripBom(input);\n};\n\n/**\n * Cast `val` to an array.\n */\n\nexports.arrayify = function(val) {\n  return val ? (Array.isArray(val) ? val : [val]) : [];\n};\n\n/**\n * Returns true if `str` starts with `substr`.\n */\n\nexports.startsWith = function(str, substr, len) {\n  if (typeof len !== 'number') len = substr.length;\n  return str.slice(0, len) === substr;\n};\n"]},"metadata":{},"sourceType":"script"}