{"ast":null,"code":"'use strict';\n\nvar typeOf = require('kind-of');\n\nvar extend = require('extend-shallow');\n/**\n * Parse sections in `input` with the given `options`.\n *\n * ```js\n * var sections = require('{%= name %}');\n * var result = sections(input, options);\n * // { content: 'Content before sections', sections: [] }\n * ```\n * @param {String|Buffer|Object} `input` If input is an object, it's `content` property must be a string or buffer.\n * @param {Object} options\n * @return {Object} Returns an object with a `content` string and an array of `sections` objects.\n * @api public\n */\n\n\nmodule.exports = function (input, options) {\n  if (typeof options === 'function') {\n    options = {\n      parse: options\n    };\n  }\n\n  var file = toObject(input);\n  var defaults = {\n    section_delimiter: '---',\n    parse: identity\n  };\n  var opts = extend({}, defaults, options);\n  var delim = opts.section_delimiter;\n  var lines = file.content.split(/\\r?\\n/);\n  var sections = null;\n  var section = createSection();\n  var content = [];\n  var stack = [];\n\n  function initSections(val) {\n    file.content = val;\n    sections = [];\n    content = [];\n  }\n\n  function closeSection(val) {\n    if (stack.length) {\n      section.key = getKey(stack[0], delim);\n      section.content = val;\n      opts.parse(section, sections);\n      sections.push(section);\n      section = createSection();\n      content = [];\n      stack = [];\n    }\n  }\n\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i];\n    var len = stack.length;\n    var ln = line.trim();\n\n    if (isDelimiter(ln, delim)) {\n      if (ln.length === 3 && i !== 0) {\n        if (len === 0 || len === 2) {\n          content.push(line);\n          continue;\n        }\n\n        stack.push(ln);\n        section.data = content.join('\\n');\n        content = [];\n        continue;\n      }\n\n      if (sections === null) {\n        initSections(content.join('\\n'));\n      }\n\n      if (len === 2) {\n        closeSection(content.join('\\n'));\n      }\n\n      stack.push(ln);\n      continue;\n    }\n\n    content.push(line);\n  }\n\n  if (sections === null) {\n    initSections(content.join('\\n'));\n  } else {\n    closeSection(content.join('\\n'));\n  }\n\n  file.sections = sections;\n  return file;\n};\n\nfunction isDelimiter(line, delim) {\n  if (line.slice(0, delim.length) !== delim) {\n    return false;\n  }\n\n  if (line.charAt(delim.length + 1) === delim.slice(-1)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction toObject(input) {\n  if (typeOf(input) !== 'object') {\n    input = {\n      content: input\n    };\n  }\n\n  if (typeof input.content !== 'string' && !isBuffer(input.content)) {\n    throw new TypeError('expected a buffer or string');\n  }\n\n  input.content = input.content.toString();\n  input.sections = [];\n  return input;\n}\n\nfunction getKey(val, delim) {\n  return val ? val.slice(delim.length).trim() : '';\n}\n\nfunction createSection() {\n  return {\n    key: '',\n    data: '',\n    content: ''\n  };\n}\n\nfunction identity(val) {\n  return val;\n}\n\nfunction isBuffer(val) {\n  if (val && val.constructor && typeof val.constructor.isBuffer === 'function') {\n    return val.constructor.isBuffer(val);\n  }\n\n  return false;\n}","map":{"version":3,"sources":["D:/programmering/react projects/min-hemsida-1/frontend/node_modules/section-matter/index.js"],"names":["typeOf","require","extend","module","exports","input","options","parse","file","toObject","defaults","section_delimiter","identity","opts","delim","lines","content","split","sections","section","createSection","stack","initSections","val","closeSection","length","key","getKey","push","i","line","len","ln","trim","isDelimiter","data","join","slice","charAt","isBuffer","TypeError","toString","constructor"],"mappings":"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","sourcesContent":["'use strict';\n\nvar typeOf = require('kind-of');\nvar extend = require('extend-shallow');\n\n/**\n * Parse sections in `input` with the given `options`.\n *\n * ```js\n * var sections = require('{%= name %}');\n * var result = sections(input, options);\n * // { content: 'Content before sections', sections: [] }\n * ```\n * @param {String|Buffer|Object} `input` If input is an object, it's `content` property must be a string or buffer.\n * @param {Object} options\n * @return {Object} Returns an object with a `content` string and an array of `sections` objects.\n * @api public\n */\n\nmodule.exports = function(input, options) {\n  if (typeof options === 'function') {\n    options = { parse: options };\n  }\n\n  var file = toObject(input);\n  var defaults = {section_delimiter: '---', parse: identity};\n  var opts = extend({}, defaults, options);\n  var delim = opts.section_delimiter;\n  var lines = file.content.split(/\\r?\\n/);\n  var sections = null;\n  var section = createSection();\n  var content = [];\n  var stack = [];\n\n  function initSections(val) {\n    file.content = val;\n    sections = [];\n    content = [];\n  }\n\n  function closeSection(val) {\n    if (stack.length) {\n      section.key = getKey(stack[0], delim);\n      section.content = val;\n      opts.parse(section, sections);\n      sections.push(section);\n      section = createSection();\n      content = [];\n      stack = [];\n    }\n  }\n\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i];\n    var len = stack.length;\n    var ln = line.trim();\n\n    if (isDelimiter(ln, delim)) {\n      if (ln.length === 3 && i !== 0) {\n        if (len === 0 || len === 2) {\n          content.push(line);\n          continue;\n        }\n        stack.push(ln);\n        section.data = content.join('\\n');\n        content = [];\n        continue;\n      }\n\n      if (sections === null) {\n        initSections(content.join('\\n'));\n      }\n\n      if (len === 2) {\n        closeSection(content.join('\\n'));\n      }\n\n      stack.push(ln);\n      continue;\n    }\n\n    content.push(line);\n  }\n\n  if (sections === null) {\n    initSections(content.join('\\n'));\n  } else {\n    closeSection(content.join('\\n'));\n  }\n\n  file.sections = sections;\n  return file;\n};\n\nfunction isDelimiter(line, delim) {\n  if (line.slice(0, delim.length) !== delim) {\n    return false;\n  }\n  if (line.charAt(delim.length + 1) === delim.slice(-1)) {\n    return false;\n  }\n  return true;\n}\n\nfunction toObject(input) {\n  if (typeOf(input) !== 'object') {\n    input = { content: input };\n  }\n\n  if (typeof input.content !== 'string' && !isBuffer(input.content)) {\n    throw new TypeError('expected a buffer or string');\n  }\n\n  input.content = input.content.toString();\n  input.sections = [];\n  return input;\n}\n\nfunction getKey(val, delim) {\n  return val ? val.slice(delim.length).trim() : '';\n}\n\nfunction createSection() {\n  return { key: '', data: '', content: '' };\n}\n\nfunction identity(val) {\n  return val;\n}\n\nfunction isBuffer(val) {\n  if (val && val.constructor && typeof val.constructor.isBuffer === 'function') {\n    return val.constructor.isBuffer(val);\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"script"}