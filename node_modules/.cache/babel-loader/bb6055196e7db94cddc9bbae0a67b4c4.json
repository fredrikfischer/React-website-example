{"ast":null,"code":"'use strict';\n\nconst engines = require('./engines');\n\nconst utils = require('./utils');\n\nmodule.exports = function (options) {\n  const opts = Object.assign({}, options); // ensure that delimiters are an array\n\n  opts.delimiters = utils.arrayify(opts.delims || opts.delimiters || '---');\n\n  if (opts.delimiters.length === 1) {\n    opts.delimiters.push(opts.delimiters[0]);\n  }\n\n  opts.language = (opts.language || opts.lang || 'yaml').toLowerCase();\n  opts.engines = Object.assign({}, engines, opts.parsers, opts.engines);\n  return opts;\n};","map":{"version":3,"sources":["D:/programmering/react projects/min-hemsida-1/frontend/node_modules/gray-matter/lib/defaults.js"],"names":["engines","require","utils","module","exports","options","opts","Object","assign","delimiters","arrayify","delims","length","push","language","lang","toLowerCase","parsers"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AACjC,QAAMC,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,OAAlB,CAAb,CADiC,CAGjC;;AACAC,EAAAA,IAAI,CAACG,UAAL,GAAkBP,KAAK,CAACQ,QAAN,CAAeJ,IAAI,CAACK,MAAL,IAAeL,IAAI,CAACG,UAApB,IAAkC,KAAjD,CAAlB;;AACA,MAAIH,IAAI,CAACG,UAAL,CAAgBG,MAAhB,KAA2B,CAA/B,EAAkC;AAChCN,IAAAA,IAAI,CAACG,UAAL,CAAgBI,IAAhB,CAAqBP,IAAI,CAACG,UAAL,CAAgB,CAAhB,CAArB;AACD;;AAEDH,EAAAA,IAAI,CAACQ,QAAL,GAAgB,CAACR,IAAI,CAACQ,QAAL,IAAiBR,IAAI,CAACS,IAAtB,IAA8B,MAA/B,EAAuCC,WAAvC,EAAhB;AACAV,EAAAA,IAAI,CAACN,OAAL,GAAeO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,OAAlB,EAA2BM,IAAI,CAACW,OAAhC,EAAyCX,IAAI,CAACN,OAA9C,CAAf;AACA,SAAOM,IAAP;AACD,CAZD","sourcesContent":["'use strict';\n\nconst engines = require('./engines');\nconst utils = require('./utils');\n\nmodule.exports = function(options) {\n  const opts = Object.assign({}, options);\n\n  // ensure that delimiters are an array\n  opts.delimiters = utils.arrayify(opts.delims || opts.delimiters || '---');\n  if (opts.delimiters.length === 1) {\n    opts.delimiters.push(opts.delimiters[0]);\n  }\n\n  opts.language = (opts.language || opts.lang || 'yaml').toLowerCase();\n  opts.engines = Object.assign({}, engines, opts.parsers, opts.engines);\n  return opts;\n};\n"]},"metadata":{},"sourceType":"script"}