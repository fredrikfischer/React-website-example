{"ast":null,"code":"const path = require(\"path\");\n\nconst fs = require(\"fs\");\n\nconst dirPath = path.join(__dirname, \"posts_md\");\nlet postList = [];\n\nconst getPosts = async () => {\n  await fs.readdir(dirPath, (err, files) => {\n    if (err) {\n      return console.log(\"Failed to list content of directory: \" + err);\n    }\n\n    console.log(files);\n    files.forEach((file, i) => {\n      let obj = {};\n      let post;\n      fs.readFile(`${dirPath}/${file}`, \"utf8\", (err, contents) => {});\n    });\n  });\n};\n\ngetPosts();","map":{"version":3,"sources":["D:/programmering/react projects/min-hemsida-1/frontend/src/Post1.js"],"names":["path","require","fs","dirPath","join","__dirname","postList","getPosts","readdir","err","files","console","log","forEach","file","i","obj","post","readFile","contents"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAME,OAAO,GAAGH,IAAI,CAACI,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAAhB;AAEA,IAAIC,QAAQ,GAAG,EAAf;;AAEA,MAAMC,QAAQ,GAAG,YAAa;AAC5B,QAAML,EAAE,CAACM,OAAH,CAAWL,OAAX,EAAoB,CAACM,GAAD,EAAMC,KAAN,KAAgB;AACxC,QAAGD,GAAH,EAAQ;AACN,aAAOE,OAAO,CAACC,GAAR,CAAY,0CAA0CH,GAAtD,CAAP;AACD;;AACDE,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEAA,IAAAA,KAAK,CAACG,OAAN,CAAc,CAACC,IAAD,EAAOC,CAAP,KAAa;AACzB,UAAIC,GAAG,GAAG,EAAV;AACA,UAAIC,IAAJ;AACAf,MAAAA,EAAE,CAACgB,QAAH,CAAa,GAAEf,OAAQ,IAAGW,IAAK,EAA/B,EAAkC,MAAlC,EAA0C,CAACL,GAAD,EAAMU,QAAN,KAAmB,CAE5D,CAFD;AAGD,KAND;AAOD,GAbK,CAAN;AAcD,CAfD;;AAiBAZ,QAAQ","sourcesContent":["const path = require(\"path\");\r\nconst fs = require(\"fs\");\r\n\r\nconst dirPath = path.join(__dirname, \"posts_md\");\r\n\r\nlet postList = [];\r\n\r\nconst getPosts = async  () => {\r\n  await fs.readdir(dirPath, (err, files) => {\r\n    if(err) {\r\n      return console.log(\"Failed to list content of directory: \" + err);\r\n    }\r\n    console.log(files);\r\n\r\n    files.forEach((file, i) => {\r\n      let obj = {};\r\n      let post \r\n      fs.readFile(`${dirPath}/${file}`, \"utf8\", (err, contents) => {\r\n\r\n      })\r\n    })\r\n  })\r\n}\r\n\r\ngetPosts()\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}