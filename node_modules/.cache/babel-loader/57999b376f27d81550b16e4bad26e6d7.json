{"ast":null,"code":"'use strict';\n\nconst typeOf = require('kind-of');\n\nconst getEngine = require('./engine');\n\nconst defaults = require('./defaults');\n\nmodule.exports = function (file, data, options) {\n  if (data == null && options == null) {\n    switch (typeOf(file)) {\n      case 'object':\n        data = file.data;\n        options = {};\n        break;\n\n      case 'string':\n        return file;\n\n      default:\n        {\n          throw new TypeError('expected file to be a string or object');\n        }\n    }\n  }\n\n  const str = file.content;\n  const opts = defaults(options);\n\n  if (data == null) {\n    if (!opts.data) return file;\n    data = opts.data;\n  }\n\n  const language = file.language || opts.language;\n  const engine = getEngine(language, opts);\n\n  if (typeof engine.stringify !== 'function') {\n    throw new TypeError('expected \"' + language + '.stringify\" to be a function');\n  }\n\n  data = Object.assign({}, file.data, data);\n  const open = opts.delimiters[0];\n  const close = opts.delimiters[1];\n  const matter = engine.stringify(data, options).trim();\n  let buf = '';\n\n  if (matter !== '{}') {\n    buf = newline(open) + newline(matter) + newline(close);\n  }\n\n  if (typeof file.excerpt === 'string' && file.excerpt !== '') {\n    if (str.indexOf(file.excerpt.trim()) === -1) {\n      buf += newline(file.excerpt) + newline(close);\n    }\n  }\n\n  return buf + newline(str);\n};\n\nfunction newline(str) {\n  return str.slice(-1) !== '\\n' ? str + '\\n' : str;\n}","map":{"version":3,"sources":["D:/programmering/react projects/min-hemsida-1/frontend/node_modules/gray-matter/lib/stringify.js"],"names":["typeOf","require","getEngine","defaults","module","exports","file","data","options","TypeError","str","content","opts","language","engine","stringify","Object","assign","open","delimiters","close","matter","trim","buf","newline","excerpt","indexOf","slice"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,UAAD,CAAzB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAxB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAeC,IAAf,EAAqBC,OAArB,EAA8B;AAC7C,MAAID,IAAI,IAAI,IAAR,IAAgBC,OAAO,IAAI,IAA/B,EAAqC;AACnC,YAAQR,MAAM,CAACM,IAAD,CAAd;AACE,WAAK,QAAL;AACEC,QAAAA,IAAI,GAAGD,IAAI,CAACC,IAAZ;AACAC,QAAAA,OAAO,GAAG,EAAV;AACA;;AACF,WAAK,QAAL;AACE,eAAOF,IAAP;;AACF;AAAS;AACP,gBAAM,IAAIG,SAAJ,CAAc,wCAAd,CAAN;AACD;AATH;AAWD;;AAED,QAAMC,GAAG,GAAGJ,IAAI,CAACK,OAAjB;AACA,QAAMC,IAAI,GAAGT,QAAQ,CAACK,OAAD,CAArB;;AACA,MAAID,IAAI,IAAI,IAAZ,EAAkB;AAChB,QAAI,CAACK,IAAI,CAACL,IAAV,EAAgB,OAAOD,IAAP;AAChBC,IAAAA,IAAI,GAAGK,IAAI,CAACL,IAAZ;AACD;;AAED,QAAMM,QAAQ,GAAGP,IAAI,CAACO,QAAL,IAAiBD,IAAI,CAACC,QAAvC;AACA,QAAMC,MAAM,GAAGZ,SAAS,CAACW,QAAD,EAAWD,IAAX,CAAxB;;AACA,MAAI,OAAOE,MAAM,CAACC,SAAd,KAA4B,UAAhC,EAA4C;AAC1C,UAAM,IAAIN,SAAJ,CAAc,eAAeI,QAAf,GAA0B,8BAAxC,CAAN;AACD;;AAEDN,EAAAA,IAAI,GAAGS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,IAAI,CAACC,IAAvB,EAA6BA,IAA7B,CAAP;AACA,QAAMW,IAAI,GAAGN,IAAI,CAACO,UAAL,CAAgB,CAAhB,CAAb;AACA,QAAMC,KAAK,GAAGR,IAAI,CAACO,UAAL,CAAgB,CAAhB,CAAd;AACA,QAAME,MAAM,GAAGP,MAAM,CAACC,SAAP,CAAiBR,IAAjB,EAAuBC,OAAvB,EAAgCc,IAAhC,EAAf;AACA,MAAIC,GAAG,GAAG,EAAV;;AAEA,MAAIF,MAAM,KAAK,IAAf,EAAqB;AACnBE,IAAAA,GAAG,GAAGC,OAAO,CAACN,IAAD,CAAP,GAAgBM,OAAO,CAACH,MAAD,CAAvB,GAAkCG,OAAO,CAACJ,KAAD,CAA/C;AACD;;AAED,MAAI,OAAOd,IAAI,CAACmB,OAAZ,KAAwB,QAAxB,IAAoCnB,IAAI,CAACmB,OAAL,KAAiB,EAAzD,EAA6D;AAC3D,QAAIf,GAAG,CAACgB,OAAJ,CAAYpB,IAAI,CAACmB,OAAL,CAAaH,IAAb,EAAZ,MAAqC,CAAC,CAA1C,EAA6C;AAC3CC,MAAAA,GAAG,IAAIC,OAAO,CAAClB,IAAI,CAACmB,OAAN,CAAP,GAAwBD,OAAO,CAACJ,KAAD,CAAtC;AACD;AACF;;AAED,SAAOG,GAAG,GAAGC,OAAO,CAACd,GAAD,CAApB;AACD,CA7CD;;AA+CA,SAASc,OAAT,CAAiBd,GAAjB,EAAsB;AACpB,SAAOA,GAAG,CAACiB,KAAJ,CAAU,CAAC,CAAX,MAAkB,IAAlB,GAAyBjB,GAAG,GAAG,IAA/B,GAAsCA,GAA7C;AACD","sourcesContent":["'use strict';\n\nconst typeOf = require('kind-of');\nconst getEngine = require('./engine');\nconst defaults = require('./defaults');\n\nmodule.exports = function(file, data, options) {\n  if (data == null && options == null) {\n    switch (typeOf(file)) {\n      case 'object':\n        data = file.data;\n        options = {};\n        break;\n      case 'string':\n        return file;\n      default: {\n        throw new TypeError('expected file to be a string or object');\n      }\n    }\n  }\n\n  const str = file.content;\n  const opts = defaults(options);\n  if (data == null) {\n    if (!opts.data) return file;\n    data = opts.data;\n  }\n\n  const language = file.language || opts.language;\n  const engine = getEngine(language, opts);\n  if (typeof engine.stringify !== 'function') {\n    throw new TypeError('expected \"' + language + '.stringify\" to be a function');\n  }\n\n  data = Object.assign({}, file.data, data);\n  const open = opts.delimiters[0];\n  const close = opts.delimiters[1];\n  const matter = engine.stringify(data, options).trim();\n  let buf = '';\n\n  if (matter !== '{}') {\n    buf = newline(open) + newline(matter) + newline(close);\n  }\n\n  if (typeof file.excerpt === 'string' && file.excerpt !== '') {\n    if (str.indexOf(file.excerpt.trim()) === -1) {\n      buf += newline(file.excerpt) + newline(close);\n    }\n  }\n\n  return buf + newline(str);\n};\n\nfunction newline(str) {\n  return str.slice(-1) !== '\\n' ? str + '\\n' : str;\n}\n"]},"metadata":{},"sourceType":"script"}